package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short RBRACKET = 10;
		static public final short RCURLY = 11;
		static public final short VOID = 12;
		static public final short BOOLEAN = 13;
		static public final short INT = 14;
		static public final short LCURLY = 15;
		static public final short SEMICOLON = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short COMMA = 21;
		static public final short EQL = 22;
		static public final short IMPORT = 23;
		static public final short PUBLIC = 24;
		static public final short PLUS = 25;
		static public final short TIMES = 26;
		static public final short DIV = 27;
		static public final short MOD = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDLlbNLLKK$kvz304A639gva1WWg0eCm4I8PQbeEQC8cgccJQeJQP9sIZbBwtLwWzezKj" +
		"cLZPgPMKsMMPQLbesQ8DPLbPcxhvxxdcFotttmQDLBkzTtzbxVtkVVOPxpm2OAx0Cbs0oAZ" +
		"0Hap0Dqp4AJV85Ri2Dk0bzv0JwuJmCGMvGtBtoM7XnyBN7mGmP5uybk3OG5n4ohWnZC2CGr" +
		"nPcN7GWhW2rc81AN8vw568nXc4uqbJRAUZTgJUrKs$VJhm3E$5bTk8xt#MRgtmTkSiKLzrn" +
		"zF8qcaKmonNRNyMETR7P7bdpFBYH7boD1rVdmJLuS5Cyk9QGRRX6Y2f7J3661it0NrWHLAS" +
		"hUtvN4N8Koz641Cnpj5#AAx00Ls8X5k6gRhTvkksUI4Gaed0Vpi9y#HbB4Oiuz23VYZiGWn" +
		"Bojwc$p#Rj5JGFHRW5PwDLVi9rI48lpiJjk5aE8HbhTOmr8#LgHYpjWe1sSK2RgRHMEOWCk" +
		"mtPA1kHBflbAvrZ5RLpC9xlkHY0ERWLwp28VSsYDXWvoCS8zl0YN8ZHk1JZP1CQvGbCnMnS" +
		"ZMjmlHp6Ila6g#LhhE7tlnDtutxS0#0kFC2o3GPt81zt5si6eZbIox977y#l6eTU76CIzm5" +
		"tN1hR2o$ESCJr2nbd$#N#k8IGSHdSk$e6ubB3Z6llNnPNzs3k8qCuTxbS9NcSGRlj4LpF$v" +
		"Vtl$HvSUxHn$1$0FyAhzYwiBEUIPnxX1rZ4eFySLojRguhEoBC6WRIExJVdojp85Tb9a$Kx" +
		"hPvkkr2MiNSCKfv7x37MycTg9gymLaiuQvMfly#cxTNK3hFd7B#LOQgaS0xaILhoSHnTx9Z" +
		"scUaSytQ3n9r6x7gAyNmjNEKgup9V7tKB5dCVQ#KLZBjHBufxA6fwiLoHxKHetonIglGC5J" +
		"cI6jKFFTJL9dADR5#DTIJJWmZAeXw8e9OG1mXqW2ZsOhp0p3fDnuYZbDF8NeISSA7CbddJA" +
		"AUJrGJEPhBfbwfSunX$SMKjJJAAGiensdVUFgMKOwbqQAvEbiQ4xGzsjMd6lfMwfWrn5hY1" +
		"D56efBo4UtRqB4U$mGOcrc$GUUPGdihPQFsDzBUhklk9Ezllv2OH6ulPH4nsPbNnnyWFzN5" +
		"7T9v3z8tJUSg9N$KNJyK63zHvpf5VRhc#3tD6Pf$a6ZngDT4b16pYHAYYfX3BDB#FeH$lgr" +
		"lCvDOI3GxSipISWanry$pq#znZ76R1OUzCxWlwEtmxtFmZGwzsQFUKfUzGyjLMgvp#7Ph#R" +
		"2hpdvtNeVliExJBiBwheCebsjEzDWZFEeTSzadEzfcZEOtERW1Ec#KrOvtVup4OCwCrxaUT" +
		"SLcX1hNlm7pPNhpPgwMFOYyxkSrquCvh8T#v6yvfYHB#LF#aD$XUkHuGFjSbGS2zdxYiu3r" +
		"AV49iO$uMFRA7jb2xKDvZoNNihn1l4gy95jbY#nMTNR91qg#BzjPRbFw2uwsNvRdvJbvLkd" +
		"FoEEoWV8LPRseogVaINbTNfDtvHrvMzwIDsK7sO#KxtjLVcUr9D$AZt94Vd2Dx4jL$XQmVv" +
		"LVE1#db7wIHGDlcb4y1qm2wYmeeSwrp9FA2A2IUtuLT$5gnbfd6VSgxkz60CCTA60EFwoJR" +
		"1HZQvcpWhPr7fHJ7wa0ti5y6f54j9QcXa$9eSnX8Ozs5gM5RFR5WdLpoITVG#c5NFfoAOiq" +
		"ScYtm#2PQH86JquB4OHFwtxuUCyp2F3EvoCCtl1Cdei#0kgyjL3$3$ZfESy=");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [1] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [2] Imports = 
			RETURN3,	// [3] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [4] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [5] Declarations = 
			Action.RETURN,	// [6] Declaration = Function
			Action.RETURN,	// [7] Declaration = Field
			Action.RETURN,	// [8] Declaration = Type
			RETURN9,	// [9] Function = Accessibility TypeName ID LPAREN ParameterList RPAREN LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [10] Field = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [11] Type = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [12] Accessibility = PUBLIC
			Action.NONE,  	// [13] Accessibility = 
			Action.RETURN,	// [14] TypeName = PrimitiveType
			Action.RETURN,	// [15] TypeName = ArrayType
			Action.RETURN,	// [16] TypeName = ID
			Action.RETURN,	// [17] PrimitiveType = VOID
			Action.RETURN,	// [18] PrimitiveType = BOOLEAN
			Action.RETURN,	// [19] PrimitiveType = INT
			RETURN3,	// [20] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [23] ParameterList = Parameters
			Action.NONE,  	// [24] ParameterList = 
			RETURN2,	// [25] Parameters = Parameter ParameterTail; returns 'ParameterTail' although none is marked
			RETURN3,	// [26] ParameterTail = COMMA Parameter ParameterTail; returns 'ParameterTail' although none is marked
			Action.NONE,  	// [27] ParameterTail = 
			RETURN2,	// [28] Parameter = TypeName ID; returns 'ID' although none is marked
			RETURN2,	// [29] Statements = Statement Statements; returns 'Statements' although none is marked
			Action.NONE,  	// [30] Statements = 
			RETURN3,	// [31] Statement = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [32] Statement = LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN5,	// [33] Statement = IF LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN7,	// [34] Statement = IF LPAREN Expression RPAREN Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN5,	// [35] Statement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [36] Statement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [37] Statement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [38] Statement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [39] Statement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [40] Expression = Assignment
			Action.RETURN,	// [41] Expression = RHSExpression
			RETURN3,	// [42] Assignment = LHSExpression EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [43] LHSExpression = ID
			Action.RETURN,	// [44] LHSExpression = IndexExpr
			RETURN4,	// [45] IndexExpr = ID LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4,	// [46] IndexExpr = IndexExpr LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [47] RHSExpression = ArithmeticExpression
			RETURN3,	// [48] RHSExpression = ArithmeticExpression ComparisonOperator ArithmeticExpression; returns 'ArithmeticExpression' although none is marked
			Action.RETURN,	// [49] ComparisonOperator = EQEQ
			Action.RETURN,	// [50] ComparisonOperator = NEQ
			Action.RETURN,	// [51] ComparisonOperator = LT
			Action.RETURN,	// [52] ComparisonOperator = LEQ
			Action.RETURN,	// [53] ComparisonOperator = GT
			Action.RETURN,	// [54] ComparisonOperator = GEQ
			new Action() {	// [55] ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [56] ArithmeticExpression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [57] AdditiveOperator = PLUS
			Action.RETURN,	// [58] AdditiveOperator = MINUS
			RETURN3,	// [59] Term = Term TIMES Factor; returns 'Factor' although none is marked
			RETURN3,	// [60] Term = Term DIV Factor; returns 'Factor' although none is marked
			RETURN3,	// [61] Term = Term MOD Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [62] Term = Factor
			RETURN2,	// [63] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [64] Factor = PrimaryExpression
			Action.RETURN,	// [65] PrimaryExpression = LHSExpression
			RETURN4,	// [66] PrimaryExpression = ID LPAREN ExpressionList RPAREN; returns 'RPAREN' although none is marked
			RETURN3,	// [67] PrimaryExpression = LBRACKET ArrayExpression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [68] PrimaryExpression = STRING_LITERAL
			Action.RETURN,	// [69] PrimaryExpression = INT_LITERAL
			Action.RETURN,	// [70] PrimaryExpression = Boolean
			RETURN3,	// [71] PrimaryExpression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [72] ExpressionList = Expressions
			Action.NONE,  	// [73] ExpressionList = 
			new Action() {	// [74] Expressions = Expressions COMMA Expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [75] Expressions = Expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN2,	// [76] ArrayExpression = Expression ArrayExpressionTail; returns 'ArrayExpressionTail' although none is marked
			RETURN3,	// [77] ArrayExpressionTail = COMMA Expression ArrayExpressionTail; returns 'ArrayExpressionTail' although none is marked
			Action.NONE,  	// [78] ArrayExpressionTail = 
			Action.RETURN,	// [79] Boolean = TRUE
			Action.RETURN	// [80] Boolean = FALSE
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
