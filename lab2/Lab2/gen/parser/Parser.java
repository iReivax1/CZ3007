package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short INT_LITERAL = 6;
		static public final short TRUE = 7;
		static public final short FALSE = 8;
		static public final short RPAREN = 9;
		static public final short RBRACKET = 10;
		static public final short RCURLY = 11;
		static public final short VOID = 12;
		static public final short BOOLEAN = 13;
		static public final short INT = 14;
		static public final short LCURLY = 15;
		static public final short SEMICOLON = 16;
		static public final short IF = 17;
		static public final short WHILE = 18;
		static public final short BREAK = 19;
		static public final short RETURN = 20;
		static public final short COMMA = 21;
		static public final short EQL = 22;
		static public final short IMPORT = 23;
		static public final short PUBLIC = 24;
		static public final short PLUS = 25;
		static public final short TIMES = 26;
		static public final short DIV = 27;
		static public final short MOD = 28;
		static public final short TYPE = 29;
		static public final short MODULE = 30;
		static public final short ELSE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LT = 34;
		static public final short LEQ = 35;
		static public final short GT = 36;
		static public final short GEQ = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9orLcbKLLKK$kvz8E8BmG058Z1JK45GWGSXo2XIY1GDDefafPKb3PQDMZPQ$EXdmrgjrkg" +
		"FFqsphAHir6Pjij9iCANIKYir6dRVkU#y##wxxpx05RstlhFtjwTpxhdtx7i1imChq89vgC" +
		"8vE1SNuYBKORvyW#jn0sx4ITA774p0P1H6nTqlQmSN1ryu3cRCk96u4alikBYOSPKu7HVRS" +
		"Qi76PTWnqr78yx6J9o7PfJX3ap5D6HOSuz6Mh$UCVrwi$lnZkl7DxuVtoINRwxbYxIDzR3b" +
		"MxOvBckHHsIfXwtUmzRaOJlBmtP#p7grhljJuuWfnnItNqGsHDd#n7LHTGRYDmqK8RzW9UO" +
		"Z6SiSQpeDDsCvRi6jk0st7$USGysJ48yKF81XgC1md4W#0dwSW4HUtN3SXO3cYzHJ8uTm5I" +
		"v5AaO5EPOYdNmPEcGzzKuvY6kG6JmPiW#TE5EV4dNrCzJLSqUwv5lSRLcghVrGsXcsTecbB" +
		"KKMJkOOd7KzQrqkUtIjOFKzhFqWShdoot0AJaKU2Z0HnMGLAC4iD60sMj4cpw5TdiK5M22z" +
		"M2XxSOLyZyMu6jVoVg$2dRWN3m6u1$TnV1ZXtseOx2W#Tejuxaq2zq8njHD9x2V9r4Pnjr9" +
		"vhjrn6PnzS7668oudPbpmgG$59SUCos8lohRZnWmoBho#F9xjYUmBaxcJXJmrHTpDuDmbFC" +
		"l$btSeVOErDVwdxA6skUzFP4nAb1yyaMwRtyCs48yRP8R14#rSqrYUjt4ySUFvrZlUEOUQ1" +
		"zXDVUmibJprLUnP0VQGMdvdL3AcYdlNe7dmgL7PPNpcostk9yyaLxjNR$aDVJ8IoTEr7hvw" +
		"5U5dPmfRl3I3C$iv1cSPmLfbHB1Mg7gwNdawzLngAPGfP1LytvlCKV#P6edMlrh3q5urIpm" +
		"C4MQaS2H2Fvv#e7jbi9Db4bE9AgAPY2CM0yOSoWpA5XKN0lb1OXMnZJX2V4Ziigh2sAThfW" +
		"AcGTv7ELBRygcd1NMpYBvvb0KaCoX7KxPfNmbz7PJ590krBL$FNQBvfCWrcNdqBT8nIuWku" +
		"ajYEGqpAH$HlaSZy$YKm7YA#QMw3jTYhA4iq$vsyhKwju7sWDRtKw#Wt4YPHLGww#gOpRHN" +
		"kMnRzJpPHBNMkJupXwWbSea9H3tHedDwgJTe$HZrHfsNICnoppiGc5EdQr4OhThMHjGGhKI" +
		"J8tQsbjm7ipbavwtUuRYcnuWd7Fpfw3cHvl1lSDZR7NgdHrwNYw$JSeMMtGxV9YqVT#LiST" +
		"Tr#BRhDJr9y1aqVPGBj6stbhqUUJjTV6yaDmve#vgmpVHf6y#F6HzZFNtHDkEmbZsHTjElx" +
		"OUe9yMwng46vuiRm7$KuxgweN$ojnos94VvGux9KRX#SiJMlhR6tJR$YjXbivq4pxXyGNmk" +
		"dycdqaFj4s4$aW#8BSJhn2loilJ8nrRETld8ajlaBOwlMVfBZhatouloWcoqzETbdJn3#Qh" +
		"5DhbM#Pqr$cIDFrhZ3$Ap793zygQy8U$BU$Akl2DlorPwTgZPvNSxzpVvbVlmZwN$nM4klm" +
		"Y7iT#RXEg7FhwVJ4BrPCD63NjxBRjp7MC3v06elctOcER0TDO8ePoydB7rh5bDNaszZ7gf1" +
		"V1RoQSHJoHeQMhuB3c5DHIAoFCe5VAv5WNrXL9CUmEb5mhfAwIiq2WW3yFWEz4a3BuP5U88" +
		"dzP3yF6Bp2HKB$UfVcwzGnMQ$WNyiZ9n");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [1] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [2] Imports = 
			RETURN3,	// [3] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [4] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [5] Declarations = 
			Action.RETURN,	// [6] Declaration = Function
			Action.RETURN,	// [7] Declaration = Field
			Action.RETURN,	// [8] Declaration = Type
			RETURN9,	// [9] Function = Accessibility TypeName ID LPAREN ParameterList RPAREN LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [10] Field = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [11] Type = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [12] Accessibility = PUBLIC
			Action.NONE,  	// [13] Accessibility = 
			Action.RETURN,	// [14] TypeName = PrimitiveType
			Action.RETURN,	// [15] TypeName = ArrayType
			Action.RETURN,	// [16] TypeName = ID
			Action.RETURN,	// [17] PrimitiveType = VOID
			Action.RETURN,	// [18] PrimitiveType = BOOLEAN
			Action.RETURN,	// [19] PrimitiveType = INT
			RETURN3,	// [20] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [23] ParameterList = Parameters
			Action.NONE,  	// [24] ParameterList = 
			RETURN2,	// [25] Parameters = Parameter ParameterTail; returns 'ParameterTail' although none is marked
			RETURN3,	// [26] ParameterTail = COMMA Parameter ParameterTail; returns 'ParameterTail' although none is marked
			Action.NONE,  	// [27] ParameterTail = 
			RETURN2,	// [28] Parameter = TypeName ID; returns 'ID' although none is marked
			RETURN2,	// [29] Statements = Statement Statements; returns 'Statements' although none is marked
			Action.NONE,  	// [30] Statements = 
			RETURN3,	// [31] Statement = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [32] Statement = LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN5,	// [33] Statement = IF LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN7,	// [34] Statement = IF LPAREN Expression RPAREN Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN5,	// [35] Statement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [36] Statement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [37] Statement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [38] Statement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [39] Statement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [40] Expression = Assignment
			Action.RETURN,	// [41] Expression = RHSExpression
			RETURN3,	// [42] Assignment = LHSExpression EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [43] LHSExpression = ID
			Action.RETURN,	// [44] LHSExpression = IndexExpr
			RETURN4,	// [45] IndexExpr = ID LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			RETURN4,	// [46] IndexExpr = IndexExpr LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [47] RHSExpression = ArithmeticExpression
			RETURN3,	// [48] RHSExpression = ArithmeticExpression ComparisonOperator ArithmeticExpression; returns 'ArithmeticExpression' although none is marked
			Action.RETURN,	// [49] ComparisonOperator = EQEQ
			Action.RETURN,	// [50] ComparisonOperator = NEQ
			Action.RETURN,	// [51] ComparisonOperator = LT
			Action.RETURN,	// [52] ComparisonOperator = LEQ
			Action.RETURN,	// [53] ComparisonOperator = GT
			Action.RETURN,	// [54] ComparisonOperator = GEQ
			new Action() {	// [55] ArithmeticExpression = ArithmeticExpression AdditiveOperator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [56] ArithmeticExpression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [57] AdditiveOperator = PLUS
			Action.RETURN,	// [58] AdditiveOperator = MINUS
			RETURN3,	// [59] Term = Term TIMES Factor; returns 'Factor' although none is marked
			RETURN3,	// [60] Term = Term DIV Factor; returns 'Factor' although none is marked
			RETURN3,	// [61] Term = Term MOD Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [62] Term = Factor
			RETURN2,	// [63] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [64] Factor = PrimaryExpression
			Action.RETURN,	// [65] PrimaryExpression = LHSExpression
			RETURN4,	// [66] PrimaryExpression = ID LPAREN ParameterList RPAREN; returns 'RPAREN' although none is marked
			RETURN3,	// [67] PrimaryExpression = LBRACKET ArrayExpression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [68] PrimaryExpression = STRING_LITERAL
			Action.RETURN,	// [69] PrimaryExpression = INT_LITERAL
			Action.RETURN,	// [70] PrimaryExpression = Boolean
			RETURN3,	// [71] PrimaryExpression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
			RETURN2,	// [72] ArrayExpression = Expression ArrayExpressionTail; returns 'ArrayExpressionTail' although none is marked
			Action.NONE,  	// [73] ArrayExpression = 
			RETURN3,	// [74] ArrayExpressionTail = COMMA Expression ArrayExpressionTail; returns 'ArrayExpressionTail' although none is marked
			Action.NONE,  	// [75] ArrayExpressionTail = 
			Action.RETURN,	// [76] Boolean = TRUE
			Action.RETURN	// [77] Boolean = FALSE
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
